buildscript { repositories { mavenCentral() } }

plugins {
  id "org.springframework.boot" version "2.7.0"
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id "java"
  id "com.diffplug.spotless" version "6.10.0"
  id "jacoco"
  id "org.sonarqube" version "3.4.0.2513"
  id "com.github.jk1.dependency-license-report" version "2.1"
  id "com.adarshr.test-logger" version "3.2.0"
}

group = "de.bund.digitalservice"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "17"

configurations { compileOnly { extendsFrom annotationProcessor } }

repositories { mavenCentral() }

jacoco { toolVersion = "0.8.8" }

testlogger { theme "mocha" }

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation("org.springframework.boot:spring-boot-starter-webflux") {
    exclude group: "io.netty", module: "netty-tcnative-classes"
    because("CVE-2021-43797, not using Tomcat")
  }
  // => CVE-2021-37136, CVE-2021-37137, CVE-2021-43797
  implementation("io.netty:netty-all:4.1.77.Final") {
    exclude group: "io.netty", module: "netty-tcnative-classes"
    because("CVE-2021-43797, not using Tomcat")
  }
  compileOnly "org.projectlombok:lombok"
  developmentOnly "org.springframework.boot:spring-boot-devtools"
  annotationProcessor "org.projectlombok:lombok"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "io.projectreactor:reactor-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "com.tngtech.archunit:archunit-junit5:0.23.0"
  testImplementation "org.mockito:mockito-junit-jupiter:4.7.0"
}

jar { // We have no need for the plain archive, thus skip creation for build speedup!
  enabled = false }

test { useJUnitPlatform { excludeTags "integration" } }

task integrationTest(type: Test) {
  description = "Runs the integration tests."
  group = "verification"
  useJUnitPlatform { includeTags "integration" }

  // So that running integration test require running unit tests first,
  // and we won"t even attempt running integration tests when there are
  // failing unit tests.
  dependsOn test
  finalizedBy jacocoTestReport
}

check.dependsOn integrationTest

jacocoTestReport {
  // Jacoco hooks into all tasks of type: Test automatically, but results for each of these
  // tasks are kept separately and are not combined out of the box.. we want to gather
  // coverage of our unit and integration tests as a single report!
  executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
  reports {
    xml.required = true
    html.required = true
  }
  dependsOn integrationTest // All tests are required to run before generating a report..
}

spotless {
  java {
    removeUnusedImports()
    googleJavaFormat()
  }

  groovyGradle {
    greclipse("4.6.3").configFile("greclipse.properties")
    toggleOffOn()
    replaceRegex("quotes", "(['])(.*)\\1", "\"\$2\"")
  }

  format "misc", {
    target "**/*.js", "**/*.json", "**/*.md", "**/*.properties", "**/*.sh", "**/*.yml"
    // spotless:off
    prettier(["prettier": "2.6.1", "prettier-plugin-properties": "0.1.0", "prettier-plugin-sh": "0.7.1"])
        .config(["keySeparator": "="])
    // spotless:on
  }
}

sonarqube {
  // NOTE: sonarqube picks up combined coverage correctly without further configuration from:
  // build/reports/jacoco/test/jacocoTestReport.xml
  properties {
    property "sonar.projectKey", "digitalservicebund_java-application-template"
    property "sonar.organization", "digitalservicebund"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport

bootBuildImage {
  def containerRegistry = System.getenv("CONTAINER_REGISTRY") ?: "ghcr.io"
  def containerImageName = System.getenv("CONTAINER_IMAGE_NAME") ?: "digitalservicebund/${rootProject.name}"
  def containerImageVersion = System.getenv("CONTAINER_IMAGE_VERSION") ?: "latest"

  imageName = "${containerRegistry}/${containerImageName}:${containerImageVersion}"
  builder = "paketobuildpacks/builder:tiny"
  publish = false
  docker {
    publishRegistry {
      username = System.getenv("CONTAINER_REGISTRY_USER") ?: ""
      password = System.getenv("CONTAINER_REGISTRY_PASSWORD") ?: ""
      url = "https://${containerRegistry}"
    }
  }
}

import com.github.jk1.license.filter.*
licenseReport {
  // If there's a new dependency with a yet unknown license causing this task to fail
  // the license(s) will be listed in build/reports/dependency-license/dependencies-without-allowed-license.json
  allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
  filters = [
    // With second arg true we get the default transformations:
    // https://github.com/jk1/Gradle-License-Report/blob/7cf695c38126b63ef9e907345adab84dfa92ea0e/src/main/resources/default-license-normalizer-bundle.json
    new LicenseBundleNormalizer(null, true)
  ]
}
