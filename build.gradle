plugins {
  id "org.springframework.boot" version "2.5.4"
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id "java"
  id "com.diffplug.spotless" version "5.15.0"
  id "jacoco"
  id "org.owasp.dependencycheck" version "6.3.1"
}

group = "org.4germany"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.boot:spring-boot-starter-webflux"
  compileOnly "org.projectlombok:lombok"
  developmentOnly "org.springframework.boot:spring-boot-devtools"
  annotationProcessor "org.projectlombok:lombok"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "io.projectreactor:reactor-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "com.tngtech.archunit:archunit-junit5:0.21.0"
}

test {
  useJUnitPlatform {
    excludeTags "integration"
  }
  testLogging {
    events "passed", "skipped", "failed"
  }
}

task integrationTest(type: Test) {
  description = "Runs the integration tests."
  group = "verification"
  useJUnitPlatform {
    includeTags "integration"
  }
  testLogging {
    events "passed", "skipped", "failed"
  }
  // So that running integration test require running unit tests first,
  // and we won"t even attempt running integration tests when there are
  // failing unit tests.
  dependsOn test
}

check.dependsOn integrationTest

jacocoTestReport {
  reports {
    xml.required = false
    csv.required = false
    html.required = false
  }
}

task combineJacocoReports(type: JacocoReport) {
  executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
  classDirectories.setFrom files(project.sourceSets.main.output)
  sourceDirectories.setFrom files(project.sourceSets.main.allSource.srcDirs)
  reports {
    html.required = true
    html.outputLocation = layout.buildDirectory.dir("reports/jacoco")
  }
  dependsOn integrationTest // All tests are required to run before generating the report..
}

integrationTest.finalizedBy combineJacocoReports

spotless {
  java {
    removeUnusedImports()
    googleJavaFormat()
  }
  groovyGradle {
    greclipse().configFile("greclipse.properties")
  }

  def prettierVersion = "2.4.1"

  format "misc", {
    target "**/*.js", "**/*.md", "**/*.yml"
    prettier(prettierVersion)
  }
  format "properties", {
    target "**/*.properties"
    prettier(["prettier": prettierVersion, "prettier-plugin-properties": "0.1.0"]).config(["keySeparator": "="])
  }
  format "shellscript", {
    target "**/*.sh"
    prettier(["prettier": prettierVersion, "prettier-plugin-sh": "0.7.1"])
  }
}

dependencyCheck {
  format = "JSON"
  failBuildOnCVSS = 7 // Severity: High
}

bootBuildImage {
  imageName = System.getenv("CONTAINER_REGISTRY") + "/" + System.getenv("CONTAINER_IMAGE_NAME") + ":latest"
  docker {
    publishRegistry {
      username = System.getenv("CONTAINER_REGISTRY_USER")
      password = System.getenv("CONTAINER_REGISTRY_PASSWORD")
      url = "https://" + System.getenv("CONTAINER_REGISTRY")
    }
  }
}
