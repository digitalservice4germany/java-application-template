plugins {
  id "org.springframework.boot" version "2.6.0"
  id "io.spring.dependency-management" version "1.0.11.RELEASE"
  id "java"
  id "com.diffplug.spotless" version "6.0.0"
  id "jacoco"
  id "org.owasp.dependencycheck" version "6.5.0.1"
  id "org.sonarqube" version "3.3"
}

group = "org.4germany"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.boot:spring-boot-starter-webflux"
  implementation "io.netty:netty-all:4.1.69.Final" // => CVE-2021-37136, CVE-2021-37137
  implementation "org.apache.logging.log4j:log4j-api:2.17.0" // => CVE-2021-44228
  implementation "org.apache.logging.log4j:log4j-to-slf4j:2.16.0" // => CVE-2021-44228
  compileOnly "org.projectlombok:lombok"
  developmentOnly "org.springframework.boot:spring-boot-devtools"
  annotationProcessor "org.projectlombok:lombok"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "io.projectreactor:reactor-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "com.tngtech.archunit:archunit-junit5:0.22.0"
  testImplementation "org.mockito:mockito-junit-jupiter:4.1.0"
}

jar {
  // We have no need for the plain archive, thus skip creation for build speedup!
  enabled = false
}

test {
  useJUnitPlatform {
    excludeTags "integration"
  }
  testLogging {
    events "passed", "skipped", "failed"
  }
}

task integrationTest(type: Test) {
  description = "Runs the integration tests."
  group = "verification"
  useJUnitPlatform {
    includeTags "integration"
  }
  testLogging {
    events "passed", "skipped", "failed"
  }
  // So that running integration test require running unit tests first,
  // and we won"t even attempt running integration tests when there are
  // failing unit tests.
  dependsOn test
  finalizedBy jacocoTestReport
}

check.dependsOn integrationTest

jacocoTestReport {
  // Jacoco hooks into all tasks of type: Test automatically, but results for each of these
  // tasks are kept separately and are not combined out of the box.. we want to gather
  // coverage of our unit and integration tests as a single report!
  executionData fileTree(project.buildDir.absolutePath).include("jacoco/*.exec")
  reports {
    xml.required = true
    html.required = true
  }
  dependsOn integrationTest // All tests are required to run before generating a report..
}

spotless {
  java {
    removeUnusedImports()
    googleJavaFormat()
  }
  groovyGradle {
    greclipse().configFile("greclipse.properties")
  }

  def prettierVersion = "2.4.1"

  format "misc", {
    target "**/*.js", "**/*.md", "**/*.yml"
    prettier(prettierVersion)
  }
  format "properties", {
    target "**/*.properties"
    prettier(["prettier": prettierVersion, "prettier-plugin-properties": "0.1.0"]).config(["keySeparator": "="])
  }
  format "shellscript", {
    target "**/*.sh"
    prettier(["prettier": prettierVersion, "prettier-plugin-sh": "0.7.1"])
  }
}

dependencyCheck {
  format = "JSON"
  failBuildOnCVSS = 7 // Severity: High
}

sonarqube {
  // NOTE: sonarqube picks up combined coverage correctly without further configuration from:
  // build/reports/jacoco/test/jacocoTestReport.xml
  properties {
    property "sonar.projectKey", "digitalservice4germany_java-application-template"
    property "sonar.organization", "digitalservice4germany"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport

bootBuildImage {
  def containerRegistry = System.getenv("CONTAINER_REGISTRY") ?: "ghcr.io"
  def containerImageName = System.getenv("CONTAINER_IMAGE_NAME") ?: "digitalservice4germany/${rootProject.name}"
  def containerImageVersion = System.getenv("CONTAINER_IMAGE_VERSION") ?: "latest"

  imageName = "${containerRegistry}/${containerImageName}:${containerImageVersion}"
  publish = false
  docker {
    publishRegistry {
      username = System.getenv("CONTAINER_REGISTRY_USER") ?: ""
      password = System.getenv("CONTAINER_REGISTRY_PASSWORD") ?: ""
      url = "https://${containerRegistry}"
    }
  }
}
